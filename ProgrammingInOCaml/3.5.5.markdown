# 3.8

## iterpowを呼び出す関数

```ocaml
let pow x n =
  let rec iterpow x n p =
    if      n < 1  then 1
    else if n == 1 then p
    else pow_p x (n - 1) (x * p) in
  iterpow x n x;;
```

# 3.11

## (1) ユークリッドの互除法で二世数の最大公約数を求める関数

```ocaml
let rec gcd x y =
  let r = x mod y in
  if r == 0 then y
  else gcd y r;;
```

## (3) 末尾再帰的関数を使ってフィボナッチ数を計算する iterfib

```ocaml
let iterfib n =
  let rec iterfib_ n (x, y) =
    if n == 0 then x
    else iterfib_ (n - 1) (y, x + y) in
  iterfib_ n (0, 1);;
```

## (4) 与えられた文字列のなかでASCIIコードが最も大きい文字を返すmax_ascii

```ocaml
let max_ascii s =
  let rec iter_max_ascii s n m =
    let max_length = String.length s in
    if n >= max_length then m
    else iter_max_ascii s (n + 1) (if s.[n] > m then s.[n] else m) in
  iter_max_ascii s 0 ' ';; 
```

# (5) 下のコードをposだけで書き直す

```ocaml
let rec pos n =
  neg (n - 1) +. 1.0 /. (float_of_int (4 * n + 1))
and neg n =
  if n < 0 then 0.0
  else pos n -. 1.0 /. (float_of_int (4 * n + 3));;
```

```ocaml
let pos n =
  let rec pos_ p n =
    if n < 0 then 0.0
    else if p then (pos_ (not p) (n - 1)) +. 1.0 /. (float_of_int (4 * n + 1))
    else (pos_ (not p) n) -. 1.0 /. (float_of_int (4 * n + 3)) in
  pos_ true n;;
```
