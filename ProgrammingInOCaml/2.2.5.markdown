# 練習問題 2.2.5

## 2.1

### `--1`はエラーになる

たぶん、これは整数として`--1`がパース出来ないというものによるもの。例えば`- - 1`であるならば、エラーにはならず、`1`の整数として出力される。

これは、関数として- (- 1)としてパースされるからだろう。同様に`- (-1)`もそのように出来る。

### `-2 + 3` はエラーにならない

### `9 / -4` はエラーにならない

### `+3 + 5` はエラーにならない

言われてみれば、`-3`がエラーにならないなら、`+3`だってエラーにはならないということなのだろうと思う。

## 2.2

### `float_of_int 3 + .2.5`は`float = 5.5`になる ###

ここで注目したいのは、`3+.2.5`だとエラーになるということだろう。この理由は恐らく簡単で、`float + float`が期待されているからなのだけれど、`3`は残念なことに`int`である。

`float_of_int`は型として`int -> float = <fun>`を取る。つまり、`(float_of_int 3) +.2.5`となるので、`float -> float`となる。

### `int_of_float 0.7`は`0`になる

これは上と同じ。ただ、OCamlの場合は全部切り捨てである。例えば、`9 / -4`は`-2`なのだが、`Ruby`の場合は`3`となる。

### `char_of_int((int_of_char 'A') + 20)` は `U` になる ###

これも以下同様。

### `int_of_string "0xff"`は`255`になる

`int_of_string`はどうやら、Stringを数にパースするようなものらしい。

### `5.0 ** 2.0`は`25`になる

同様

## 2.3

### `8*-2`

予想だと、`8*-2`は中間演算子`8 *- 2`と解釈されると予想される。実際に実行してみると、`Unbound value`として`*-`が出る。

### `int_of_string "0xfg"`

予想だと、`Failure`。要するにintに出来なかったというエラーになる。これは残念なことにさっきの問題で指摘済。

### `int_of_float -0.7`

一見、常識的に見えるが、恐らく`-0.7`が上手く解釈できないというのが予測されるが、実際は`int_of_float`を`-`で引こうとしてしまっている。つまり、この`-`は中間演算子として解釈されてしまっている。なので、`int_of_float (-0.7)`とすると、上手く解釈が出来るようになっている。